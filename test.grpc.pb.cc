// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: test.proto

#include "test.pb.h"
#include "test.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace mutate {

static const char* Mutator_method_names[] = {
  "/mutate.Mutator/add_node",
  "/mutate.Mutator/remove_node",
  "/mutate.Mutator/add_edge_alt",
  "/mutate.Mutator/remove_edge_alt",
};

std::unique_ptr< Mutator::Stub> Mutator::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< Mutator::Stub> stub(new Mutator::Stub(channel));
  return stub;
}

Mutator::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_add_node_(Mutator_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_remove_node_(Mutator_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_add_edge_alt_(Mutator_method_names[2], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_remove_edge_alt_(Mutator_method_names[3], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Mutator::Stub::add_node(::grpc::ClientContext* context, const ::mutate::Node& request, ::mutate::Code* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_add_node_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::mutate::Code>* Mutator::Stub::Asyncadd_nodeRaw(::grpc::ClientContext* context, const ::mutate::Node& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::mutate::Code>(channel_.get(), cq, rpcmethod_add_node_, context, request);
}

::grpc::Status Mutator::Stub::remove_node(::grpc::ClientContext* context, const ::mutate::Node& request, ::mutate::Code* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_remove_node_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::mutate::Code>* Mutator::Stub::Asyncremove_nodeRaw(::grpc::ClientContext* context, const ::mutate::Node& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::mutate::Code>(channel_.get(), cq, rpcmethod_remove_node_, context, request);
}

::grpc::Status Mutator::Stub::add_edge_alt(::grpc::ClientContext* context, const ::mutate::Edge& request, ::mutate::Code* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_add_edge_alt_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::mutate::Code>* Mutator::Stub::Asyncadd_edge_altRaw(::grpc::ClientContext* context, const ::mutate::Edge& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::mutate::Code>(channel_.get(), cq, rpcmethod_add_edge_alt_, context, request);
}

::grpc::Status Mutator::Stub::remove_edge_alt(::grpc::ClientContext* context, const ::mutate::Edge& request, ::mutate::Code* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_remove_edge_alt_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::mutate::Code>* Mutator::Stub::Asyncremove_edge_altRaw(::grpc::ClientContext* context, const ::mutate::Edge& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::mutate::Code>(channel_.get(), cq, rpcmethod_remove_edge_alt_, context, request);
}

Mutator::Service::Service() {
  (void)Mutator_method_names;
  AddMethod(new ::grpc::RpcServiceMethod(
      Mutator_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Mutator::Service, ::mutate::Node, ::mutate::Code>(
          std::mem_fn(&Mutator::Service::add_node), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Mutator_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Mutator::Service, ::mutate::Node, ::mutate::Code>(
          std::mem_fn(&Mutator::Service::remove_node), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Mutator_method_names[2],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Mutator::Service, ::mutate::Edge, ::mutate::Code>(
          std::mem_fn(&Mutator::Service::add_edge_alt), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Mutator_method_names[3],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Mutator::Service, ::mutate::Edge, ::mutate::Code>(
          std::mem_fn(&Mutator::Service::remove_edge_alt), this)));
}

Mutator::Service::~Service() {
}

::grpc::Status Mutator::Service::add_node(::grpc::ServerContext* context, const ::mutate::Node* request, ::mutate::Code* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Mutator::Service::remove_node(::grpc::ServerContext* context, const ::mutate::Node* request, ::mutate::Code* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Mutator::Service::add_edge_alt(::grpc::ServerContext* context, const ::mutate::Edge* request, ::mutate::Code* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Mutator::Service::remove_edge_alt(::grpc::ServerContext* context, const ::mutate::Edge* request, ::mutate::Code* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace mutate

